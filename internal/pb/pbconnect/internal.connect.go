// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: internal.proto

package pbconnect

import (
	context "context"
	errors "errors"
	pb "github.com/SlamJam/dolgovnya-backend/internal/pb"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// InternalName is the fully-qualified name of the Internal service.
	InternalName = "Internal"
)

// InternalClient is a client for the Internal service.
type InternalClient interface {
	NewUser(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.NewUserResponse], error)
}

// NewInternalClient constructs a client for the Internal service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInternalClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) InternalClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &internalClient{
		newUser: connect_go.NewClient[emptypb.Empty, pb.NewUserResponse](
			httpClient,
			baseURL+"/.Internal/NewUser",
			opts...,
		),
	}
}

// internalClient implements InternalClient.
type internalClient struct {
	newUser *connect_go.Client[emptypb.Empty, pb.NewUserResponse]
}

// NewUser calls Internal.NewUser.
func (c *internalClient) NewUser(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.NewUserResponse], error) {
	return c.newUser.CallUnary(ctx, req)
}

// InternalHandler is an implementation of the Internal service.
type InternalHandler interface {
	NewUser(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.NewUserResponse], error)
}

// NewInternalHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInternalHandler(svc InternalHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/.Internal/NewUser", connect_go.NewUnaryHandler(
		"/.Internal/NewUser",
		svc.NewUser,
		opts...,
	))
	return "/.Internal/", mux
}

// UnimplementedInternalHandler returns CodeUnimplemented from all methods.
type UnimplementedInternalHandler struct{}

func (UnimplementedInternalHandler) NewUser(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.NewUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("Internal.NewUser is not implemented"))
}
