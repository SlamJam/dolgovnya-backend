// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: split_the_bill.proto

package pbconnect

import (
	context "context"
	errors "errors"
	pb "github.com/SlamJam/dolgovnya-backend/internal/pb"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SplitTheBillServiceName is the fully-qualified name of the SplitTheBillService service.
	SplitTheBillServiceName = "SplitTheBillService"
)

// SplitTheBillServiceClient is a client for the SplitTheBillService service.
type SplitTheBillServiceClient interface {
	NewBillSplit(context.Context, *connect_go.Request[pb.SplitRequest]) (*connect_go.Response[pb.SplitResponse], error)
}

// NewSplitTheBillServiceClient constructs a client for the SplitTheBillService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSplitTheBillServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SplitTheBillServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &splitTheBillServiceClient{
		newBillSplit: connect_go.NewClient[pb.SplitRequest, pb.SplitResponse](
			httpClient,
			baseURL+"/.SplitTheBillService/NewBillSplit",
			opts...,
		),
	}
}

// splitTheBillServiceClient implements SplitTheBillServiceClient.
type splitTheBillServiceClient struct {
	newBillSplit *connect_go.Client[pb.SplitRequest, pb.SplitResponse]
}

// NewBillSplit calls SplitTheBillService.NewBillSplit.
func (c *splitTheBillServiceClient) NewBillSplit(ctx context.Context, req *connect_go.Request[pb.SplitRequest]) (*connect_go.Response[pb.SplitResponse], error) {
	return c.newBillSplit.CallUnary(ctx, req)
}

// SplitTheBillServiceHandler is an implementation of the SplitTheBillService service.
type SplitTheBillServiceHandler interface {
	NewBillSplit(context.Context, *connect_go.Request[pb.SplitRequest]) (*connect_go.Response[pb.SplitResponse], error)
}

// NewSplitTheBillServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSplitTheBillServiceHandler(svc SplitTheBillServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/.SplitTheBillService/NewBillSplit", connect_go.NewUnaryHandler(
		"/.SplitTheBillService/NewBillSplit",
		svc.NewBillSplit,
		opts...,
	))
	return "/.SplitTheBillService/", mux
}

// UnimplementedSplitTheBillServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSplitTheBillServiceHandler struct{}

func (UnimplementedSplitTheBillServiceHandler) NewBillSplit(context.Context, *connect_go.Request[pb.SplitRequest]) (*connect_go.Response[pb.SplitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("SplitTheBillService.NewBillSplit is not implemented"))
}
