// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dolgovnya/split_the_bill/v1/split_the_bill.proto

package split_the_billv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/SlamJam/dolgovnya-backend/internal/pb/dolgovnya/split_the_bill/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SplitTheBillServiceName is the fully-qualified name of the SplitTheBillService service.
	SplitTheBillServiceName = "dolgovnya.split_the_bill.v1.SplitTheBillService"
)

// SplitTheBillServiceClient is a client for the dolgovnya.split_the_bill.v1.SplitTheBillService
// service.
type SplitTheBillServiceClient interface {
	NewBill(context.Context, *connect_go.Request[v1.NewBillRequest]) (*connect_go.Response[v1.NewBillResponse], error)
}

// NewSplitTheBillServiceClient constructs a client for the
// dolgovnya.split_the_bill.v1.SplitTheBillService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSplitTheBillServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SplitTheBillServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &splitTheBillServiceClient{
		newBill: connect_go.NewClient[v1.NewBillRequest, v1.NewBillResponse](
			httpClient,
			baseURL+"/dolgovnya.split_the_bill.v1.SplitTheBillService/NewBill",
			opts...,
		),
	}
}

// splitTheBillServiceClient implements SplitTheBillServiceClient.
type splitTheBillServiceClient struct {
	newBill *connect_go.Client[v1.NewBillRequest, v1.NewBillResponse]
}

// NewBill calls dolgovnya.split_the_bill.v1.SplitTheBillService.NewBill.
func (c *splitTheBillServiceClient) NewBill(ctx context.Context, req *connect_go.Request[v1.NewBillRequest]) (*connect_go.Response[v1.NewBillResponse], error) {
	return c.newBill.CallUnary(ctx, req)
}

// SplitTheBillServiceHandler is an implementation of the
// dolgovnya.split_the_bill.v1.SplitTheBillService service.
type SplitTheBillServiceHandler interface {
	NewBill(context.Context, *connect_go.Request[v1.NewBillRequest]) (*connect_go.Response[v1.NewBillResponse], error)
}

// NewSplitTheBillServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSplitTheBillServiceHandler(svc SplitTheBillServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/dolgovnya.split_the_bill.v1.SplitTheBillService/NewBill", connect_go.NewUnaryHandler(
		"/dolgovnya.split_the_bill.v1.SplitTheBillService/NewBill",
		svc.NewBill,
		opts...,
	))
	return "/dolgovnya.split_the_bill.v1.SplitTheBillService/", mux
}

// UnimplementedSplitTheBillServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSplitTheBillServiceHandler struct{}

func (UnimplementedSplitTheBillServiceHandler) NewBill(context.Context, *connect_go.Request[v1.NewBillRequest]) (*connect_go.Response[v1.NewBillResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dolgovnya.split_the_bill.v1.SplitTheBillService.NewBill is not implemented"))
}
