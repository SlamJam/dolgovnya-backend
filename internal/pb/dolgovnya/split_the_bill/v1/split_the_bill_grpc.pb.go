// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: dolgovnya/split_the_bill/v1/split_the_bill.proto

package split_the_billv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SplitTheBillService_NewBill_FullMethodName = "/dolgovnya.split_the_bill.v1.SplitTheBillService/NewBill"
)

// SplitTheBillServiceClient is the client API for SplitTheBillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SplitTheBillServiceClient interface {
	NewBill(ctx context.Context, in *NewBillRequest, opts ...grpc.CallOption) (*NewBillResponse, error)
}

type splitTheBillServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSplitTheBillServiceClient(cc grpc.ClientConnInterface) SplitTheBillServiceClient {
	return &splitTheBillServiceClient{cc}
}

func (c *splitTheBillServiceClient) NewBill(ctx context.Context, in *NewBillRequest, opts ...grpc.CallOption) (*NewBillResponse, error) {
	out := new(NewBillResponse)
	err := c.cc.Invoke(ctx, SplitTheBillService_NewBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SplitTheBillServiceServer is the server API for SplitTheBillService service.
// All implementations must embed UnimplementedSplitTheBillServiceServer
// for forward compatibility
type SplitTheBillServiceServer interface {
	NewBill(context.Context, *NewBillRequest) (*NewBillResponse, error)
	mustEmbedUnimplementedSplitTheBillServiceServer()
}

// UnimplementedSplitTheBillServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSplitTheBillServiceServer struct {
}

func (UnimplementedSplitTheBillServiceServer) NewBill(context.Context, *NewBillRequest) (*NewBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBill not implemented")
}
func (UnimplementedSplitTheBillServiceServer) mustEmbedUnimplementedSplitTheBillServiceServer() {}

// UnsafeSplitTheBillServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SplitTheBillServiceServer will
// result in compilation errors.
type UnsafeSplitTheBillServiceServer interface {
	mustEmbedUnimplementedSplitTheBillServiceServer()
}

func RegisterSplitTheBillServiceServer(s grpc.ServiceRegistrar, srv SplitTheBillServiceServer) {
	s.RegisterService(&SplitTheBillService_ServiceDesc, srv)
}

func _SplitTheBillService_NewBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTheBillServiceServer).NewBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SplitTheBillService_NewBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTheBillServiceServer).NewBill(ctx, req.(*NewBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SplitTheBillService_ServiceDesc is the grpc.ServiceDesc for SplitTheBillService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SplitTheBillService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dolgovnya.split_the_bill.v1.SplitTheBillService",
	HandlerType: (*SplitTheBillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBill",
			Handler:    _SplitTheBillService_NewBill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dolgovnya/split_the_bill/v1/split_the_bill.proto",
}
