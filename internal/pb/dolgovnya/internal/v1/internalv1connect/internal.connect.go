// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dolgovnya/internal/v1/internal.proto

package internalv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/SlamJam/dolgovnya-backend/internal/pb/dolgovnya/internal/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// InternalServiceName is the fully-qualified name of the InternalService service.
	InternalServiceName = "dolgovnya.internal.v1.InternalService"
)

// InternalServiceClient is a client for the dolgovnya.internal.v1.InternalService service.
type InternalServiceClient interface {
	NewUser(context.Context, *connect_go.Request[v1.NewUserRequest]) (*connect_go.Response[v1.NewUserResponse], error)
}

// NewInternalServiceClient constructs a client for the dolgovnya.internal.v1.InternalService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInternalServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) InternalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &internalServiceClient{
		newUser: connect_go.NewClient[v1.NewUserRequest, v1.NewUserResponse](
			httpClient,
			baseURL+"/dolgovnya.internal.v1.InternalService/NewUser",
			opts...,
		),
	}
}

// internalServiceClient implements InternalServiceClient.
type internalServiceClient struct {
	newUser *connect_go.Client[v1.NewUserRequest, v1.NewUserResponse]
}

// NewUser calls dolgovnya.internal.v1.InternalService.NewUser.
func (c *internalServiceClient) NewUser(ctx context.Context, req *connect_go.Request[v1.NewUserRequest]) (*connect_go.Response[v1.NewUserResponse], error) {
	return c.newUser.CallUnary(ctx, req)
}

// InternalServiceHandler is an implementation of the dolgovnya.internal.v1.InternalService service.
type InternalServiceHandler interface {
	NewUser(context.Context, *connect_go.Request[v1.NewUserRequest]) (*connect_go.Response[v1.NewUserResponse], error)
}

// NewInternalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInternalServiceHandler(svc InternalServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/dolgovnya.internal.v1.InternalService/NewUser", connect_go.NewUnaryHandler(
		"/dolgovnya.internal.v1.InternalService/NewUser",
		svc.NewUser,
		opts...,
	))
	return "/dolgovnya.internal.v1.InternalService/", mux
}

// UnimplementedInternalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInternalServiceHandler struct{}

func (UnimplementedInternalServiceHandler) NewUser(context.Context, *connect_go.Request[v1.NewUserRequest]) (*connect_go.Response[v1.NewUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dolgovnya.internal.v1.InternalService.NewUser is not implemented"))
}
